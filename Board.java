public class Board {
	private Square[][] board;
	private int width;
	private int height;
	
	public Board(boolean largeSquares) {
		// board could be made up of either squares or square subclass largesquares
		if (largeSquares) {
			this.board = new LargeSquare[3][3];
			// width and height are for tostring function
			//(amount of size an individual cell of the board will be)
			this.width = 15;
			this.height = 7;
		}
		else {
			// board of regular (small) squares
			this.board = new Square[3][3];
			this.width = 3;
			this.height = 1;
		}
		// tracker for location (which is 1-9 instead of 3x3)
		int i = 0;
		// populate array
		for (int j = 0; j < 3; j++) {
			for (int k = 0; k < 3; k++) {
				if (largeSquares) {
					this.board[j][k] = new LargeSquare(i);
				}
				else {
					this.board[j][k] = new Square(i);
				}
				i++;
			}
		}
	}
	
	// copy constructor (for AI)
	public Board(Board newBoard, boolean largeSquares) {
		this(largeSquares);
		int i = 0;
		for (int j = 0; j < 3; j++) {
			for (int k = 0; k < 3; k++) {
				if (largeSquares) {
					try {
						this.board[j][k] = new LargeSquare(i, ((LargeSquare)newBoard.getSquare(i)).getBoard());
					}
					catch (NullPointerException e) {
						// if the square has been filled, then getBoard returns null 
						this.board[j][k].setValue(newBoard.getSquare(i).getValue());
					}
				}
				else {
					if (newBoard.getSquare(i).getValue() != ' ') {
						this.board[j][k].setValue(newBoard.getSquare(i).getValue());
					}
				}
				i++;
			}
		}
	}
	
	// return square from location
	public Square getSquare(int location) {
		int row = location/3;
		int col = location % 3;
		return board[row][col];
	}

	public void setValue(int location, char value) {
		try {
			this.getSquare(location).setValue(value);
		}

		catch (IllegalArgumentException e) {
			// catches exception generated by square: has already been filled
			throw new IllegalArgumentException(e.getLocalizedMessage());
		}

		catch (ArrayIndexOutOfBoundsException e) {
			throw new IllegalArgumentException("*That square doesn't exist. Pick a square from 1 to 9.*");
		}
	}
	
	public void setValue(int largerSquare, int smallerSquare, char value) {
		// version with 3 arguments assumes that it's a LargeSquare board
		((LargeSquare)this.getSquare(largerSquare)).getBoard().setValue(smallerSquare, value);
	}

	public boolean threeInARow(char c) {
		// check columns
		for (int i = 0; i < 3; i++) {
			if (board[i][0].getValue() == c && board[i][1].getValue() == c && board[i][2].getValue() == c) {
				return true;
			}
		}

		// check rows
		for (int i = 0; i < 3; i++) {
			if (board[0][i].getValue() == c && board[1][i].getValue() == c && board[2][i].getValue() == c) {
				return true;
			}
		}

		// check first diagonal
		if (board[0][0].getValue() == c && board[1][1].getValue() == c && board[2][2].getValue() == c) {
			return true;
		}

		// check second diagonal
		if (board[0][2].getValue() == c && board[1][1].getValue() == c && board[2][0].getValue() == c) {
			return true;
		}

		// if none of these were true, then there is no three in a row
		return false;
	}
	
	public boolean threeInARow(int board, char c) {
		// version with 2 arguments assumes that it's a LargeSquare board
		return ((LargeSquare)this.getSquare(board)).getBoard().threeInARow(c);
	}

	
	public int[] getValidMoves() {
		// find length of array
		int numValidMoves = 0;
		for (int i = 0; i < 3; i++) {
			for (int j = 0; j < 3; j++) {
				if (!(board[i][j].isFilled())) {
					numValidMoves++;
				}
			}
		}
		int[] validMoves = new int[numValidMoves];
		int k = 0;
		// populate array
		for (int i = 0; i < 3; i++) {
			for (int j = 0; j < 3; j++) {
				if (!(board[i][j].isFilled())) {
					validMoves[k] = board[i][j].getLocation();
					k++;
				}
			}
		}
		return validMoves;
	}

	public int[] getValidMoves(int board) {
		// version with 2 arguments assumes that it's a LargeSquare board
		return ((LargeSquare)this.getSquare(board)).getBoard().getValidMoves();
	}
	
	public String toString() {
		String headerFooter = "═".repeat(width);
		String middle = "─".repeat(width);
		String result = "╔" + headerFooter + "╤" + headerFooter + "╤" + headerFooter + "╗\n";
		// for each square
		for (int i = 0; i < 3; i++) {
			// for each row of that square's stringarray
			for (int j = 0; j < height; j++) {
				result += "║ "+ board[i][0].toStringArray()[j] + " │ "+ board[i][1].toStringArray()[j] + " │ "+ board[i][2].toStringArray()[j] + " ║\n";
			}
			if (i < 2) {
				result += "╟" + middle + "┼" + middle + "┼" + middle + "╢\n";
			}
		}
		result += "╚" + headerFooter + "╧" + headerFooter + "╧" + headerFooter + "╝";
		return result;
	}

}